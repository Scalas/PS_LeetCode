import pytest
from solutions.sol_2116 import Solution


cases = [
    {
        "input": {"s": "))()))", "locked": "010100"},
        "output": True,
    },
    {
        "input": {"s": "()()", "locked": "0000"},
        "output": True,
    },
    {
        "input": {"s": ")", "locked": "0"},
        "output": False,
    },
    {
        "input": {
            "s": "((()(()()))()((()()))))()((()(()",
            "locked": "10111100100101001110100010001001",
        },
        "output": True,
    },
    {
        "input": {
            "s": "))))(())((()))))((()((((((())())((()))((((())()()))(()",
            "locked": "101100101111110000000101000101001010110001110000000101",
        },
        "output": False,
    },
    {
        "input": {
            "s": "()()))()())(((()((()((()((()()()))(()()((()((()()(((()())))))()((()(()(())((()()((())))))))(())(()))"
            ")()()()((()())())(()()))((((((())()())())))))())((((()())(())(())()()()(()(()((()))((((()((()((()())"
            "(())((((())(())))(()((((())))((()(((((()()))))((((()))))())()))))())",
            "locked": "01110001000000111101000101101010011101110101111101111110111010001000000111010100001101100011001"
            "00100100011000001110101101110011000000011111000111111111001011101100000100111010111010000001100"
            "011101000110101011001000100100111110110110100101010111111001000010000010010010",
        },
        "output": True,
    },
]


@pytest.mark.sol2116
def test_run():
    for case in cases:
        assert (
            Solution.can_be_valid(
                s=case["input"]["s"],
                locked=case["input"]["locked"],
            )
            == case["output"]
        )
